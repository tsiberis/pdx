# -*- coding: utf-8 -*-
"""
/***************************************************************************
 pdxDialog
                                 A QGIS plugin
 Αυτοματοποίηση λειτουργιών πδχ
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        started coding       : 2025-04-05
        ended                : 2025-09-03
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Takis Tsiberis
        email                : tsiberis@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program was written with notepadd++                              *
 *   https://notepad-plus-plus.org/                                        *
 *                                                                         *
 *   and with the help of AI                                               *
 *   https://deepai.org/chat                                               *
 *                                                                         *
 ***************************************************************************/
"""
#-------------------Imports-------------------
import os, platform, json, webbrowser
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

#-------------------Constants-------------------
# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), '_pdx_dialog_base.ui'))

FIRST_TAB = []
FILENAME = "_first_tab.json"

#-------------------Classes-------------------
class pdxDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(pdxDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # Load the necessary data
        self.EPITHEORISEIS = {'':[['','']],'ΑΤΤΙΚΗΣ':[['ΑΘΗΝΩΝ','Αθήνα'], ['ΑΝΑΤΟΛΙΚΗΣ ΑΤΤΙΚΗΣ','Αθήνα'], ['ΔΥΤΙΚΗΣ ΑΤΤΙΚΗΣ','Αθήνα'], ['ΠΕΙΡΑΙΑ','Πειραιάς']],'ΠΕΛΟΠΟΝΝΗΣΟΥ - ΔΥΤΙΚΗΣ ΕΛΛΑΔΑΣ - ΙΟΝΙΟΥ':[['ΚΟΡΙΝΘΙΑΣ','Κόρινθος'], ['ΑΡΚΑΔΙΑΣ','Τρίπολη'], ['ΑΡΓΟΛΙΔΑΣ','Ναύπλιο'], ['ΛΑΚΩΝΙΑΣ','Σπάρτη'], ['ΜΕΣΣΗΝΙΑΣ','Καλαμάτα'], ['ΑΧΑΙΑΣ','Πάτρα'], ['ΑΙΤΩΛΟΑΚΑΡΝΑΝΙΑΣ','Μεσολόγγι'], ['ΗΛΕΙΑΣ','Πύργος'], ['ΚΕΡΚΥΡΑΣ','Κέρκυρα'], ['ΛΕΥΚΑΔΑΣ','Λευκάδα'], ['ΚΕΦΑΛΛΗΝΙΑΣ','Αργοστόλι'], ['ΖΑΚΥΝΘΟΥ','Ζάκυνθος']],'ΚΡΗΤΗΣ':[['ΗΡΑΚΛΕΙΟΥ','Ηράκλειο'], ['ΧΑΝΙΩΝ','Χανιά'], ['ΡΕΘΥΜΝΗΣ','Ρέθυμνο'], ['ΛΑΣΙΘΙΟΥ','Άγιος Νικόλαος']],'ΑΙΓΑΙΟΥ':[['ΛΕΣΒΟΥ','Μυτιλήνη'],['ΧΙΟΥ','Χίος'],['ΣΑΜΟΥ','Σάμος'],['ΚΥΚΛΑΔΩΝ','Ερμούπολη'],['ΔΩΔΕΚΑΝΗΣΟΥ','Ρόδος']],'ΜΑΚΕΔΟΝΙΑΣ-ΘΡΑΚΗΣ':[['ΣΕΡΡΩΝ','Σέρρες'],['ΘΕΣΣΑΛΟΝΙΚΗΣ','Θεσσαλονίκη'],['ΧΑΛΚΙΔΙΚΗΣ','Πολύγυρος'],['ΚΙΛΚΙΣ','Κιλκίς'],['ΠΙΕΡΙΑΣ','Κατερίνη'],['ΗΜΑΘΙΑΣ','Βέροια'],['ΠΕΛΛΑΣ','Έδεσσα'],['ΚΑΒΑΛΑΣ','Καβάλα'],['ΔΡΑΜΑΣ','Δράμα'],['ΕΒΡΟΥ','Αλεξανδρούπολη'],['ΡΟΔΟΠΗΣ','Κομοτηνή'],['ΞΑΝΘΗΣ','Ξάνθη']],'ΘΕΣΣΑΛΙΑΣ – ΣΤΕΡΕΑΣ ΕΛΛΑΔΑΣ':[['ΛΑΡΙΣΑΣ','Λάρισας'],['ΜΑΓΝΗΣΙΑΣ','Βόλος'],['ΤΡΙΚΑΛΩΝ','Τρίκαλα'],['ΚΑΡΔΙΤΣΑΣ','Καρδίτσα'],['ΦΘΙΩΤΙΔΑΣ','Λαμία'],['ΕYΡΥΤΑΝΙΑΣ','Καρπενήσι'],['ΕΥΒΟΙΑΣ','Χαλκίδα'],['ΒΟΙΩΤΙΑΣ','Λιβαδειά'],['ΦΩΚΙΔΑΣ','Άμφισσα']],'ΗΠΕΙΡΟΥ – ΔΥΤΙΚΗΣ ΜΑΚΕΔΟΝΙΑΣ':[['ΙΩΑΝΝΙΝΩΝ','Ιωάννινα'],['ΘΕΣΠΡΩΤΙΑΣ','Ηγουμενίτσα'],['ΠΡΕΒΕΖΑΣ','Πρέβεζα'],['ΑΡΤΑΣ','Άρτα'],['ΚΟΖΑΝΗΣ','Κοζάνη'],['ΦΛΩΡΙΝΑΣ','Φλώρινα'],['ΚΑΣΤΟΡΙΑΣ','Καστοριά'],['ΓΡΕΒΕΝΩΝ','Γρεβενά']]}

        # Work with the button group
        self.gender = ''
        self.buttonGroup.addButton(self.radioButton_3,1)
        self.buttonGroup.addButton(self.radioButton_4,2)
        self.buttonGroup.buttonClicked.connect(self.on_radiobutton_clicked)

        # Work with the check box
        self.partial = ''
        self.checkBox.toggled.connect(self.checkbox_toggled)

        # Deploy the gui functionality
        self.pushButton.clicked.connect(self.clear_first_tab)
        self.pushButton_2.clicked.connect(self.save_first_tab)
        self.pushButton_3.clicked.connect(self.select_output_file)
        self.pushButton_4.clicked.connect(self.accept)
        self.pushButton_5.clicked.connect(self.get_help)
        self.comboBox.currentIndexChanged.connect(self.update_second_combobox)

        # Check if the independent 'first_tab' json file exists
        self.documents_folder = self.get_documents_folder()
        if not os.getcwd() == self.documents_folder: os.chdir(self.documents_folder)
        file_path = os.path.join(self.documents_folder, FILENAME)
        if not os.path.exists(file_path):
            global FIRST_TAB
            FIRST_TAB = [0,0,'','','','',False,'','','']
            with open(FILENAME, 'w') as f:
                json.dump(FIRST_TAB, f)
        self.load_first_tab()

    def checkbox_toggled(self):
        if self.checkBox.isChecked():
            self.partial = 'μερικώς '
        else:
            self.partial = ''

    def on_radiobutton_clicked(self):
        checked_id = self.buttonGroup.checkedId()
        if checked_id == 1:
            selected_value = 'του '
        elif checked_id == 2:
            selected_value = 'της '
        self.gender = selected_value

    def update_second_combobox(self):
        # Get the currently selected item from the first combobox
        selected_category = self.comboBox.currentText()
        # Clear the second combobox
        self.comboBox_2.clear()
        # Populate the second combobox
        for value in self.EPITHEORISEIS[selected_category]:
            self.comboBox_2.addItem(value[0])

    def populate_combobox(self, data_dict):
        # Clear existing items
        self.comboBox.clear()
        # Add items from the dictionary to the ComboBox
        for key in data_dict.keys():
            self.comboBox.addItem(key)

    def clear_first_tab(self):
        self.comboBox.clear()
        self.comboBox_2.clear()
        self.lineEdit.clear()
        self.lineEdit_2.clear()
        self.lineEdit_3.clear()
        self.lineEdit_4.clear()
        self.checkBox.setChecked(False)
        self.plainTextEdit.clear()
        self.plainTextEdit_2.clear()
        self.plainTextEdit_5.clear()
        self.populate_combobox(self.EPITHEORISEIS)

    def save_first_tab(self):
        global FIRST_TAB
        FIRST_TAB[0] = self.comboBox.currentIndex()
        FIRST_TAB[1] = self.comboBox_2.currentIndex()
        FIRST_TAB[2] = self.lineEdit.text()
        FIRST_TAB[3] = self.lineEdit_2.text()
        FIRST_TAB[4] = self.lineEdit_3.text()
        FIRST_TAB[5] = self.lineEdit_4.text()
        FIRST_TAB[6] = self.checkBox.isChecked()
        FIRST_TAB[7] = self.plainTextEdit.toPlainText()
        FIRST_TAB[8] = self.plainTextEdit_2.toPlainText()
        FIRST_TAB[9] = self.plainTextEdit_5.toPlainText()
        with open(FILENAME, 'w') as f:
            json.dump(FIRST_TAB, f, ensure_ascii=False)

    def load_first_tab(self):
        global FIRST_TAB
        with open(FILENAME, 'r') as f:
            FIRST_TAB = json.load(f)
        self.populate_combobox(self.EPITHEORISEIS)
        self.comboBox.setCurrentIndex(FIRST_TAB[0])
        self.comboBox_2.setCurrentIndex(FIRST_TAB[1])
        self.lineEdit.setText(FIRST_TAB[2])
        self.lineEdit_2.setText(FIRST_TAB[3])
        self.lineEdit_3.setText(FIRST_TAB[4])
        self.lineEdit_4.setText(FIRST_TAB[5])
        self.checkBox.setChecked(FIRST_TAB[6])
        self.plainTextEdit.setPlainText(FIRST_TAB[7])
        self.plainTextEdit_2.setPlainText(FIRST_TAB[8])
        self.plainTextEdit_5.setPlainText(FIRST_TAB[9])

    def select_output_file(self):
        filename, _filter = QtWidgets.QFileDialog.getOpenFileName(self, "Select dxf file ","", '*.dxf')
        self.lineEdit_8.setText(filename)

    def get_documents_folder(self):
        system = platform.system()
        home = os.path.expanduser('~')
        if system == 'Windows': return os.path.join(home, 'Documents')
        elif system == 'Darwin': return os.path.join(home, 'Documents')
        else: return os.path.join(home, 'Documents')

    def get_help(self):
        url = 'https://htmlpreview.github.io/?https://github.com/tsiberis/pdx/blob/main/help/pdx_doc.html'
        # Open the URL in the default browser
        webbrowser.open(url)